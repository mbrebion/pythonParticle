import matplotlib.pyplot as plt
import matplotlib
import numpy as np
from scipy.optimize import curve_fit
font = {'family': 'times',
        'size': 20}

matplotlib.rc('font', **font)
"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Kbs =  2.60e-05 J/K
ms =  9.11e-08 kg
diameter =  2.76214e-05 m
v* =  4.14039e+02 m/s
dOM/L = v*dt/L =  5.00e-04
dOM/d = v*dt/d =  1.81e+00
l :  1.00000e-03  m
tau :  2.42e-06  s
d/l :  2.76e-02  
dt :  1.20761e-07  s
fill ratio s_parts/S :  7.66990e-03
viscosity :  0.16101529717988267
V max ? 53.3101522050444
Reynolds :  19.3134375
"""
kb = 2.60e-05
sigma1 = 2.76214e-05
m = 9.11e-8
T = 320
nu1 = 7.66e-3
vxs1 = [ 3.379635445572782, 8.231743997529858, 13.382849335753548, 18.21339096429552, 22.843681250343135, 26.739203335233615, 30.399970812646146, 33.773315508422336, 37.254628101861, 40.440742015041295, 43.270119118154916, 45.60144464902682, 47.7721678579106, 49.44831588342088, 50.98449148379299, 52.293184159078706, 53.19367075039715, 54.25275248623841, 54.74485908820422, 54.96361424442833]
# pour 16k particules
#900000, 335.43368549798294, 4.9999750001249995e-06, [, 7.5907293721195375, 19.44357543206014, 29.611149701612604, 36.98412339260621, 43.377278482556584, 48.376312607839886, 51.17174674295018, 53.14801865221472, ]

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Kbs =  2.60e-05 J/K
ms =  9.11e-08 kg
diameter =  1.93350e-05 m
v* =  4.14039e+02 m/s
dOM/L = v*dt/L =  7.14e-04
dOM/d = v*dt/d =  3.69e+00
l :  1.42857e-03  m
tau :  3.45e-06  s
d/l :  1.35e-02  
dt :  1.72516e-07  s
fill ratio s_parts/S :  3.75825e-03
viscosity :  0.23002185311411807
V max ? 37.31710654353109
Reynolds :  9.463584375000002
"""
nu2 = 3.75e-3
sigma2 = 1.9335e-05
vxs2 = [ 2.7445140899295897, 6.220890301798649, 9.513103684481822, 12.740868483157445, 15.861524911125045, 19.14287631686864, 21.93991936290363, 24.449457127714556, 26.953988198808773, 28.934155641721606, 30.710578478357643, 32.51831397093074, 34.035948414007215, 35.13300464747745, 36.05483410083057, 36.9959139266813, 37.77806235968768, 38.24312425312965, 38.68220580772053, 38.87708670831711]

"""
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Kbs =  2.60e-05 J/K
ms =  9.11e-08 kg
diameter =  1.38107e-05 m
v* =  4.14039e+02 m/s
dOM/L = v*dt/L =  1.00e-03
dOM/d = v*dt/d =  7.24e+00
l :  2.00000e-03  m
tau :  4.83e-06  s
d/l :  6.91e-03  
dt :  2.41523e-07  s
fill ratio s_parts/S :  1.91748e-03
viscosity :  0.32203059435976533
V max ? 26.6550761025222
Reynolds :  4.828359375
"""

nu3 = 1.92e-3
sigma3 = 1.38107e-05
vxs3 = [ 2.0867511939636896, 4.687143761252501, 7.186463647920869, 9.469845914830016, 11.722620903291533, 13.755867921018758, 15.684487475934871, 17.579630283435925, 19.433903908630906, 21.059347623569973, 22.686293197986345, 24.030022353892697, 25.0271341649626, 25.869740248909245, 26.913315369611666, 27.683340829158613, 28.32728638971072, 28.738531593050567, 29.044028198732708, 29.30539879816982]
T3 = 318.490

# pour 16k particules
#900000, 322.504243023407, 4.9999750001249995e-06, [, 4.346825946865911, 10.513845729438161, 16.289143192662053, 20.76099328564924, 24.60542705928876, 27.30044419086739, 28.952561170048064, 29.641522053075597, ]
# pour 32k particules
#900000, 322.6738607214084, 4.9999750001249995e-06, [, 4.665854604821835, 10.858751724763986, 16.14633989287605, 20.101147817018045, 23.895981042374462, 26.580901151156535, 28.613904163425076, 29.01318722521927, ]
# pour 24k particules
#900000, 322.98979158894525, 4.9999750001249995e-06, [, 4.447711086816238, 10.610889654692894, 16.044205589737597, 20.44898236253758, 23.83004404751406, 26.247056898605578, 27.972581255840296, 28.44587707209139, ]
# incertitude sur vmax3 : 0.39 m/s calculée à partir des 3 simus sur moins de particules

H = 0.1 #m
ys = np.array([H*(i+0.5) / len(vxs1)/2 for i in range(len(vxs1))])

def model(y,vmax):
    return 4*vmax/(H)**2* y * ((H)-y)


def eta0(sigma,m,T,nu):
    """
    sigma: particle diameter
    m: particle mass
    T: temperature
    :return:viscosity provided by boltzmann theory
    """
    g2 = (1-7*nu)/(1-nu)**2
    etaB =  1/(2*sigma) * (m*kb*T/np.pi)**0.5
    return etaB #* (1/g2 + 2*nu + (1+8/np.pi) * g2 * nu**2)

rhog = 9.11e-08 * 128e3 * 9.81*300 / (0.1*0.1)

plt.plot(vxs1,ys,"xk",label="l=1,00 mm",markersize=8,markeredgewidth=2)
popt1, pcov = curve_fit(model, ys, vxs1, p0=[53.])
plt.plot(model(ys,popt1[0]),ys,"-k",linewidth=2)
eta = rhog *(0.2)**2/(8*popt1[0])
print("vmax", popt1[0])
print("eta1", eta,eta0(sigma1,m,T,nu1))

plt.plot(vxs2,ys,".b",label="l=1,43 mm",markersize=8,markeredgewidth=2)
popt1, pcov = curve_fit(model, ys, vxs2, p0=[53.])
plt.plot(model(ys,popt1[0]),ys,"-b",linewidth=2)
eta = rhog *(0.2)**2/(8*popt1[0])
print("vmax", popt1[0])
print("eta2", eta,eta0(sigma2,m,T,nu2))

plt.errorbar(vxs3,ys,xerr = [0.38*2]*len(vxs3), color="r",label="l=2,00 mm",markersize=8,markeredgewidth=2)

popt1, pcov = curve_fit(model, ys, vxs3, p0=[53.])
plt.plot(model(ys,popt1[0]),ys,"-r",linewidth=2)
eta = rhog *(0.2)**2/(8*popt1[0])
print("vmax", popt1[0])
print("eta3", eta,eta0(sigma3,m,T,nu3))

plt.grid()
plt.legend()
plt.ylabel("y [m]")
plt.xlabel("v(y) [m/s]")
plt.show()